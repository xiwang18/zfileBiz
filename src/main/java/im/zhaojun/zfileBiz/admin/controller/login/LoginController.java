package im.zhaojun.zfileBiz.admin.controller.login;import cn.dev33.satoken.stp.SaTokenInfo;import cn.dev33.satoken.stp.StpUtil;import cn.hutool.crypto.SecureUtil;import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;import com.github.xiaoymin.knife4j.annotations.ApiSort;import com.github.xiaoymin.knife4j.annotations.DynamicParameter;import com.github.xiaoymin.knife4j.annotations.DynamicResponseParameters;import dev.samstevens.totp.exceptions.QrGenerationException;import im.zhaojun.zfileBiz.admin.model.enums.LoginVerifyModeEnum;import im.zhaojun.zfileBiz.admin.model.request.login.VerifyLogin2FARequest;import im.zhaojun.zfileBiz.admin.model.result.login.Login2FAResult;import im.zhaojun.zfileBiz.admin.model.result.login.LoginVerifyImgResult;import im.zhaojun.zfileBiz.admin.service.SystemConfigService;import im.zhaojun.zfileBiz.admin.service.login.ImgVerifyCodeService;import im.zhaojun.zfileBiz.admin.service.login.TwoFAVerifyService;import im.zhaojun.zfileBiz.common.util.AjaxJson;import im.zhaojun.zfileBiz.home.model.dto.SystemConfigDTO;import im.zhaojun.zfileBiz.home.model.request.UserLoginRequest;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import javax.annotation.Resource;import javax.validation.Valid;import java.util.Objects;/** * 登陆注销相关接口 * * @author zhaojun */@Api(tags = "登录模块")@ApiSort(1)@RestController@RequestMapping("/admin")public class LoginController {    @Resource    private SystemConfigService systemConfigService;    @Resource    private ImgVerifyCodeService imgVerifyCodeService;    @Resource    private TwoFAVerifyService twoFAVerifyService;    @ApiOperationSupport(order = 1, ignoreParameters = {"zfile-token"})    @ApiOperation(value = "登录")    @DynamicResponseParameters(properties = {            @DynamicParameter(name = "data", value = "登录成功后返回 token 值，后续请求需要在 header 或 cookie 中添加名为 zfile-token 的令牌", example = "629932e1-5103-4c33-85c0-dc89df108ef7", required = true),            @DynamicParameter(name = "code", value = "状态码，0 为正常，其他值表示登录失败，异常情况下见响应消息", dataTypeClass = Integer.class, example = "0"),            @DynamicParameter(name = "msg", value = "响应消息", example = "ok"),    })    @PostMapping("/login")    public AjaxJson<?> doLogin(@Valid @RequestBody UserLoginRequest userLoginRequest) {        SystemConfigDTO systemConfig = systemConfigService.getSystemConfig();        String verifyCode = userLoginRequest.getVerifyCode();        String verifyCodeUUID = userLoginRequest.getVerifyCodeUUID();        LoginVerifyModeEnum loginVerifyMode = systemConfig.getLoginVerifyMode();        String loginVerifySecret = systemConfig.getLoginVerifySecret();        if (Objects.equals(loginVerifyMode, LoginVerifyModeEnum.TWO_FACTOR_AUTHENTICATION_MODE)) {            twoFAVerifyService.checkCode(loginVerifySecret, verifyCode);        } else if (Objects.equals(loginVerifyMode, LoginVerifyModeEnum.IMG_VERIFY_MODE)) {            imgVerifyCodeService.checkCaptcha(verifyCodeUUID, verifyCode);        }        if (Objects.equals(systemConfig.getUsername(), userLoginRequest.getUsername()) &&                Objects.equals(systemConfig.getPassword(), SecureUtil.md5(userLoginRequest.getPassword()))) {            StpUtil.login("admin");            SaTokenInfo tokenInfo = StpUtil.getTokenInfo();            return AjaxJson.getSuccess("登录成功", tokenInfo.getTokenValue());        }        return AjaxJson.getError("登录失败, 账号或密码错误");    }    @ApiOperationSupport(order = 2)    @ApiOperation(value = "注销")    @PostMapping("/logout")    public AjaxJson<?> logout() {        StpUtil.logout();        return AjaxJson.getSuccess("注销成功");    }    @ApiOperationSupport(order = 3)    @ApiOperation(value = "生成 2FA")    @GetMapping("/2fa/setup")    public AjaxJson<Login2FAResult> setupDevice() throws QrGenerationException {        Login2FAResult login2FAResult = twoFAVerifyService.setupDevice();        return AjaxJson.getSuccessData(login2FAResult);    }    @ApiOperationSupport(order = 4)    @ApiOperation(value = "2FA 验证并绑定")    @PostMapping("/2fa/verify")    public AjaxJson<?> deviceVerify(@Valid @RequestBody VerifyLogin2FARequest verifyLogin2FARequest) {        twoFAVerifyService.deviceVerify(verifyLogin2FARequest);        return AjaxJson.getSuccess();    }    @ApiOperationSupport(order = 5)    @ApiOperation(value = "获取登陆验证方式")    @GetMapping("/login/verify-mode")    public AjaxJson<LoginVerifyModeEnum> loginVerifyMode() {        SystemConfigDTO systemConfig = systemConfigService.getSystemConfig();        return AjaxJson.getSuccessData(systemConfig.getLoginVerifyMode());    }    @ApiOperationSupport(order = 6)    @ApiOperation(value = "获取图形验证码")    @GetMapping("/login/captcha")    public AjaxJson<LoginVerifyImgResult> captcha() {        LoginVerifyImgResult loginVerifyImgResult = imgVerifyCodeService.generatorCaptcha();        return AjaxJson.getSuccessData(loginVerifyImgResult);    }    @ApiOperationSupport(order = 7)    @ApiOperation(value = "检测是否已登录")    @GetMapping("/login/check")    public AjaxJson<Boolean> checkLogin() {        return AjaxJson.getSuccessData(StpUtil.isLogin());    }}